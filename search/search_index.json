{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This site is designed to help teammembers manage development environments.</p>"},{"location":"#topics-covered","title":"Topics covered","text":"<ul> <li>Python - Manage multiple Python installations and virtual environments   </li> </ul>"},{"location":"python/","title":"Python","text":""},{"location":"python/#why-use-different-python-versions-and-virtual-environments","title":"Why use different Python versions and virtual environments?","text":"<p>As the Python language develops, new features become available to developers, e.g., typing support. Projects that harness these new features will require a minimum Python version. Thus, being able to run multiple Python versions on each machine is essential for our development team.</p> <p>Similarly, each project will have its own list of package dependencies, i.e., the Python modules imported within a script. In some cases, these dependencies may conflict between project source code. For example, one project may use a <code>numpy</code> feature from v1.0.0 that has since been deprecated, while another project may use a <code>numpy</code> feature introduced in v2.1.1. If you use the same Python environment for both projects, you will encounter a dependency conflict that breaks one of the programs.</p> <p>In addition, Linux and macOS both have a preinstalled \"system\" Python version used for internal tasks. Modifying any of the system packages may have unintended consequences on operating system behavior.</p>"},{"location":"python/#macos-arm","title":"macOS (ARM)","text":""},{"location":"python/#prerequisites","title":"Prerequisites","text":"<ul> <li>Homebrew</li> </ul> <p>Homebrew is a general software package manager for macOS. It handles the organization, maintenance, and updating of third-party software for developers, such as <code>pyenv</code>, a tool for managing local Python distributions and virtual environments.</p> <p>Install Homebrew:</p> <pre><code>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh | bash\n</code></pre> <p>Confirm installation:</p> <pre><code>brew --version\n</code></pre>"},{"location":"python/#pyenv","title":"Pyenv","text":"<p>Install <code>pyenv</code> with <code>brew</code>:</p> <pre><code>brew install pyenv\nbrew install pyenv-virtualenv\n</code></pre> <p>Confirm installation:</p> <pre><code>pyenv --version\n</code></pre> <p>Print a list of available Python installations:</p> <pre><code>pyenv install --list\n</code></pre> <p>Restrict the output to a specific major Python version:</p> <pre><code>pyenv install --list | grep \" 3.10\" # Only show Python 3.10.x\n</code></pre> <p>Install a Python version:</p> <pre><code>pyenv install 3.10.5\n</code></pre> <p>Set the global Python version:</p> <pre><code>pyenv global 3.10.5\n</code></pre> <p>The global version will become the default Python for your shell.</p> <p>Confirm that <code>python</code> and <code>pip</code> point to the correct executables:</p> <pre><code>which python\n/Users/user/.pyenv/shims/python\nwhich pip\n/Users/user/.pyenv/shims/pip\n</code></pre> <p>If <code>.pyenv</code> is not part of the returned paths, you may have to modify your system environment profile (different from your Python environment!).</p> <p>Add the following lines to <code>~/.zshrc</code>:</p> <pre><code># Pyenv\nif command -v pyenv 1&gt;/dev/null 2&gt;&amp;1; then\nexport PYENV_ROOT=\"$HOME/.pyenv\"\nexport PATH=\"$PYENV_ROOT/bin:$PATH\"\neval \"$(pyenv init --path)\"\neval \"$(pyenv init -)\"\nfi\n</code></pre> <p>Refresh your environment and check the <code>python</code> and <code>pip</code> executables:</p> <pre><code>source ~/.zshrc\nwhich python\nwhich pip\n</code></pre>"},{"location":"python/#virtual-environments","title":"Virtual environments","text":"<p>In addition to providing management tools for Python installations, <code>pyenv</code> also provides a command line tool for creating virtual environments:</p> <p>Create a new virtual environment for a project, specifying the Python version and environment name:</p> <pre><code>pyenv virtualenv 3.10.5 env\n</code></pre> <p>Activate the environment:</p> <pre><code>pyenv shell env\n</code></pre> <p>Alternatively, set the environment as default for the project directory:</p> <pre><code>pyenv local env\n</code></pre> <p>Now, every time you navigate inside the project directory, your system will automatically point to the desired Python executable!</p> <p>Deactivate the environment:</p> <pre><code>source deactivate\n</code></pre>"},{"location":"python/#windows","title":"Windows","text":""},{"location":"python/#prerequisites_1","title":"Prerequisites","text":"<ul> <li>Chocolatey</li> </ul> <p>Similar to Homebrew for macOS, Chocolatey is a community-driven general package manager for Windows.</p> <p>The following steps must be executed in an Administrative shell!</p> <p>Install Chocolatey:</p> <pre><code>Set-ExecutionPolicy Bypass -Scope Process -Force\n[System.Net.ServicePointManager]::SecurityProtocol = [System.Net.ServicePointManager]::SecurityProtocol -bor 3072\nInvoke-Expression ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))\n</code></pre> <p>Confirm installation:</p> <pre><code>choco --version\n</code></pre>"},{"location":"python/#pyenv_1","title":"Pyenv","text":"<p>Install <code>pyenv</code>:</p> <pre><code>choco install pyenv-win\n</code></pre> <p>Confirm installation</p> <pre><code>pyenv --version\n</code></pre> <p>If you receive an error, it may be because the PowerShell security policy prevents the execution of third-party scripts without administrator approval.</p> <p>Check the execution policy:</p> <pre><code>Get-ExecutionPolicy\n</code></pre> <p>If the return value is <code>Restricted</code>, change the permissions to <code>RemoteSigned</code>:</p> <pre><code>Set-ExecutionPolicy RemoteSigned\n</code></pre> <p>Once again, confirm <code>pyenv</code> installation:</p> <pre><code>pyenv --version\n</code></pre> <p>Print a list of available Python installations:</p> <pre><code>pyenv install --list\n</code></pre> <p>Restrict the output to a specific major Python version:</p> <pre><code>pyenv install -l | Select-String \" 3.10\" # Only show Python 3.10.x\n</code></pre> <p>Install a Python version:</p> <pre><code>pyenv install 3.10.5\n</code></pre> <p>Set the global Python version:</p> <pre><code>pyenv global 3.10.5\n</code></pre> <p>The global version will become the default Python for your shell.</p> <p>Confirm that <code>python</code> and <code>pip</code> point to the correct executables:</p> <pre><code>Get-Command python | Format-Table Source\nC:\\Users\\user\\.pyenv\\shims\\python\nGet-Command pip | Format-Table Source\nC:\\Users\\user\\.pyenv\\shims\\pip\n</code></pre> <p>If <code>.pyenv</code> is not part of the returned paths, you may have to modify your system environment variables. Specifically, change the order of the Windows <code>$Path</code> variable so that the <code>pyenv</code> binaries are listed at top.</p>"},{"location":"python/#virtual-environments_1","title":"Virtual environments","text":"<p>Unfortunately, <code>pyenv-win</code> does not include the command line tool for managing virtual environments. Windows users need to follow the traditional approach with the built-in Python <code>venv</code> module.</p> <p>Create a new virtual environment for a project, specifying the Python version and environment name:</p> <pre><code>python -m venv C:\\path\\to\\env\n</code></pre> <p>Activate the environment:</p> <pre><code>C:\\path\\to\\env\\Scripts\\Activate.ps1\n</code></pre> <p>Deactivate the environment:</p> <pre><code>deactivate\n</code></pre>"}]}